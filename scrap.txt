(* Country Borders *)
(* Move to Python *)
newline linetype dotdash linethickness 1 pts 
 -1 0
shell : echo " " | awk '{ \
    x = -1; \
    y = 0; \
    l = 60; \
    deg = 60; \
    pi = atan2(0, -1); \
    rad = deg*pi/180; \
    for (i = 0; i < 4; i++) \
    { \
        a = l*sin(rad); \
        b = l*cos(rad); \
        x = x + a; \
        y = y + b; \
        printf("  %f %f \n", x, y); \
        printf("%f %f  ", x, y); \
        deg = deg + 90; \
        rad = deg*pi/180; \
    } \
}'

(* Trees *)
newcurve eps ./Tree.ps marksize 5 5 pts 40 40
newcurve eps ./Tree.ps marksize 5 5 pts 42 44
newcurve eps ./Tree.ps marksize 5 5 pts 38 48
newcurve eps ./Tree.ps marksize 5 5 pts 40 55
newcurve eps ./Tree.ps marksize 5 5 pts 40 36

(* Longitude *)
newcurve linetype dotted marktype none
pts 20 -70  20 70
newcurve linetype dotted marktype none
pts 40 -70  40 70
newcurve linetype dotted marktype none
pts 60 -70  60 70
newcurve linetype dotted marktype none
pts 80 -70  80 70
newcurve linetype dotted marktype none
pts 100 -70  100 70
newcurve linetype dotted marktype none
pts 120 -70  120 70
newcurve linetype dotted marktype none
pts 140 -70  140 70
newcurve linetype dotted marktype none
pts 160 -70  160 70
newcurve linetype dotted marktype none
pts 180 -70  180 70

(* Latitude *)
newcurve linetype dotted marktype none
pts 0 -50  200 -50
newcurve linetype dotted marktype none
pts 0 -30  200 -30
newcurve linetype dotted marktype none
pts 0 -10  200 -10
newcurve linetype dotted marktype none
pts 0 10  200 10
newcurve linetype dotted marktype none
pts 0 30  200 30
newcurve linetype dotted marktype none
pts 0 50  200 50

(* Ocean *)
newcurve poly color 0.3 0.5 0.7 marktype none linetype solid color 0.3 0.5 0.7
pts 100 0
postscript : 1 setlinewidth 0 0 100 0 360 arc fill 0.3 0.5 0.7

(* Land Mass *)
newcurve marktype none linetype solid color 0.45 0.6 0.41 
pts 
0 0
0.5 0.3
1 0.5
1.5 0.7
2 1
3 1.3
4 2
5 3
6 3.5
7 4.1
8 4.5
9 4.8
10 5
11 9
12 13
13 18
14 20
15 23
17.5 30.5
20 38
25 48.5
30 50
35 57.5
40 62
45 65
57.5 66
70 67
71 68
72 69
73 68
74 66
75 65
76 64
77 63
80 62
85 60
90 57
95 55
100 54
105 51
110 55
115 58
120 63
125 67
130 68
135 70
140 67
145 63
150 57
151 53
152 50
153 48
154 43
155 40
160 32.5
161 30
162 27
165 25
166 24.5
167 23.75
168 22
169 21.25
170 20
172 19.25
173 18.5 
174 17
175 15
180 10
185 0

newcurve marktype none linetype solid 
pts
0 0
0.5 -2
1 -5
2 -8
3 -11
4 -14
5 -18
6 -21
7 -24
8 -27
9 -30
10 -33
11 -31
12 -29
13 -28
14 -28
15 -29
16 -29
17 -29.5
17.5 -30
18 -32
19 -34.25
20 -36.75
25 -39
30 -40
31 -40.5
32 -41.25
33 -43
34 -44.5
35 -46
36 -47.25
37.5 -48
40 -49
41 -49
42.5 -49.5
44 -50
45 -50
46 -51
48 -51
49 -51
50 -52
55 -54
65 -56
70 -58
71 -60
72 -62
73 -64
74 -66
75 -68
76 -68
77 -69
78 -69
79 -68
80 -67.5
81 -67
82 -66.5
83 -66
84 -65.5
85 -65
86 -64.5
87 -64
90 -62
92.5 -60
95 -58
97.5 -55
100 -55
102.5 -56
105 -56
107.5 -57
110 -58
111 -59
112 -60
113 -61
114 -61.5
115 -62
116 -62
117 -61.5
118 -60
120 -60
125 -61
130 -61
135 -62
140 -62
142.5 -61
145 -60
147.5 -59
150 -58
152.5 -57
155 -56
157.5 -55
160 -54
162.5 -56
165 -58
167.5 -55
170 -53
171 -52.5
172 -50.75
173 -50
174 -49.25
175 -48.5
177.5 -45
178 -43
179 -41.5
180 -39
181 -39
182 -38.5
183 -38
184 -36
192 -20
185 0


(*PYTHON Line intersection*)
import math

def line_line_intersection(line1, x2, angle):
    # Iterate through each segment of line1
    for i in range(len(line1) - 1):
        # Get endpoints of the segment
        x1, y1 = line1[i]
        x2, y2 = line1[i + 1]
        # Calculate slope of line2
        slope2 = math.tan(math.radians(angle))
        # Calculate y-intercept of line2
        b2 = x2 * slope2
        # Calculate y-coordinates of endpoints of line2
        y3 = slope2 * x1 + b2
        y4 = slope2 * x2 + b2
        # Check if the lines intersect
        intersection = segment_intersection(x1, y1, x2, y2, x1, y3, x2, y4)
        if intersection:
            return intersection
    return None

# Define your list of points representing line1
line1 = [(0, 0), (0.5, 0.3), (1, 0.5), (1.5, 0.7), (2, 1), (3, 1.3), (4, 2), (5, 3), (6, 3.5), (7, 4.1), (8, 4.5), (9, 4.8)]  # Example points for line1
# Define x-position and angle for line2
x2 = 10  # Example x-position
angle = 45  # Example angle in degrees

# Call the function to find the intersection point
intersection_point = line_line_intersection(line1, x2, angle)
if intersection_point:
    print("The lines intersect at point:", intersection_point)
else:
    print("The lines do not intersect.")


def segment_intersection(p1, p2, p3, p4):
    # p1, p2, p3, p4 are points (x, y)
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3
    x4, y4 = p4
    
    # Calculate slopes of the lines
    slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')  # Avoid division by zero
    slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')
    
    # Calculate intercepts
    intercept1 = y1 - slope1 * x1 if slope1 != float('inf') else x1
    intercept2 = y3 - slope2 * x3 if slope2 != float('inf') else x3
    
    # Check if the lines are parallel (same slope)
    if slope1 == slope2:
        return None  # Lines are parallel, no intersection
    
    # Calculate intersection point coordinates
    if slope1 == float('inf'):  # Line1 is vertical
        x_intersect = x1
        y_intersect = slope2 * x_intersect + intercept2
    elif slope2 == float('inf'):  # Line2 is vertical
        x_intersect = x3
        y_intersect = slope1 * x_intersect + intercept1
    else:
        x_intersect = (intercept2 - intercept1) / (slope1 - slope2)
        y_intersect = slope1 * x_intersect + intercept1
    
    # Check if intersection point is within line segments
    if (min(x1, x2) <= x_intersect <= max(x1, x2) and
        min(y1, y2) <= y_intersect <= max(y1, y2) and
        min(x3, x4) <= x_intersect <= max(x3, x4) and
        min(y3, y4) <= y_intersect <= max(y3, y4)):
        return (x_intersect, y_intersect)
    else:
        return None  # Intersection point is outside line segments


# Example usage:
line1 = [(1, 1), (4, 4)]
line2 = [(1, 4), (4, 1)]
intersection = line_intersection(line1, line2)
print("Intersection point:", intersection)
